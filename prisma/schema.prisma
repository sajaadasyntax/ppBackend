generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NationalLevel {
  id          String             @id @default(uuid())
  name        String
  code        String?            @unique
  description String?
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  adminId     String?
  bulletins   Bulletin[]
  admin       User?              @relation("NationalLevelAdmin", fields: [adminId], references: [id])
  regions     Region[]
  reports     Report[]
  plans       SubscriptionPlan[] @relation("NationalLevelPlans")
  surveys     Survey[]
  users       User[]
  votingItems VotingItem[]
}

model Region {
  id              String             @id @default(uuid())
  name            String
  code            String?            @unique
  description     String?
  active          Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  adminId         String?
  nationalLevelId String?
  bulletins       Bulletin[]
  localities      Locality[]
  admin           User?              @relation("RegionAdmin", fields: [adminId], references: [id])
  nationalLevel   NationalLevel?     @relation(fields: [nationalLevelId], references: [id])
  reports         Report[]
  plans           SubscriptionPlan[] @relation("RegionPlans")
  surveys         Survey[]
  users           User[]
  votingItems     VotingItem[]
}

model Locality {
  id          String             @id @default(uuid())
  name        String
  code        String?            @unique
  description String?
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  regionId    String
  adminId     String?
  adminUnits  AdminUnit[]
  bulletins   Bulletin[]
  admin       User?              @relation("LocalityAdmin", fields: [adminId], references: [id])
  region      Region             @relation(fields: [regionId], references: [id])
  reports     Report[]
  plans       SubscriptionPlan[] @relation("LocalityPlans")
  surveys     Survey[]
  users       User[]
  votingItems VotingItem[]
}

model AdminUnit {
  id          String             @id @default(uuid())
  name        String
  code        String?            @unique
  description String?
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  localityId  String
  adminId     String?
  admin       User?              @relation("AdminUnitAdmin", fields: [adminId], references: [id])
  locality    Locality           @relation(fields: [localityId], references: [id])
  bulletins   Bulletin[]
  districts   District[]
  reports     Report[]
  plans       SubscriptionPlan[] @relation("AdminUnitPlans")
  surveys     Survey[]
  users       User[]
  votingItems VotingItem[]
}

model District {
  id          String             @id @default(uuid())
  name        String
  code        String?            @unique
  description String?
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  adminUnitId String
  adminId     String?
  bulletins   Bulletin[]
  admin       User?              @relation("DistrictAdmin", fields: [adminId], references: [id])
  adminUnit   AdminUnit          @relation(fields: [adminUnitId], references: [id])
  reports     Report[]
  plans       SubscriptionPlan[] @relation("DistrictPlans")
  surveys     Survey[]
  users       User[]
  votingItems VotingItem[]
}

model ExpatriateRegion {
  id                   String                @id @default(uuid())
  name                 String                @unique
  code                 String?               @unique
  description          String?
  active               Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  adminId              String?
  bulletins            Bulletin[]            @relation("ExpatriateRegionBulletins")
  admin                User?                 @relation("ExpatriateRegionAdmin", fields: [adminId], references: [id])
  reports              Report[]              @relation("ExpatriateRegionReports")
  sectorAdminUnits     SectorAdminUnit[]
  sectorDistricts      SectorDistrict[]
  sectorLocalities     SectorLocality[]
  sectorNationalLevels SectorNationalLevel[]
  sectorRegions        SectorRegion[]
  plans                SubscriptionPlan[]    @relation("ExpatriateRegionPlans")
  surveys              Survey[]              @relation("ExpatriateRegionSurveys")
  users                User[]
  votingItems          VotingItem[]          @relation("ExpatriateRegionVotingItems")
}

model SectorNationalLevel {
  id                 String             @id @default(uuid())
  name               String
  code               String?            @unique
  sectorType         SectorType
  description        String?
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  expatriateRegionId String?
  adminId            String?
  bulletins          Bulletin[]         @relation("SectorNationalLevelBulletins")
  reports            Report[]           @relation("SectorNationalLevelReports")
  admin              User?              @relation("SectorNationalLevelAdmin", fields: [adminId], references: [id])
  expatriateRegion   ExpatriateRegion?  @relation(fields: [expatriateRegionId], references: [id])
  sectorRegions      SectorRegion[]
  plans              SubscriptionPlan[] @relation("SectorNationalLevelPlans")
  surveys            Survey[]           @relation("SectorNationalLevelSurveys")
  users              User[]
  votingItems        VotingItem[]       @relation("SectorNationalLevelVotingItems")
}

model SectorRegion {
  id                    String               @id @default(uuid())
  name                  String
  code                  String?              @unique
  sectorType            SectorType
  description           String?
  active                Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  sectorNationalLevelId String?
  expatriateRegionId    String?
  adminId               String?
  bulletins             Bulletin[]           @relation("SectorRegionBulletins")
  reports               Report[]             @relation("SectorRegionReports")
  sectorLocalities      SectorLocality[]
  admin                 User?                @relation("SectorRegionAdmin", fields: [adminId], references: [id])
  expatriateRegion      ExpatriateRegion?    @relation(fields: [expatriateRegionId], references: [id])
  sectorNationalLevel   SectorNationalLevel? @relation(fields: [sectorNationalLevelId], references: [id])
  plans                 SubscriptionPlan[]   @relation("SectorRegionPlans")
  surveys               Survey[]             @relation("SectorRegionSurveys")
  users                 User[]
  votingItems           VotingItem[]         @relation("SectorRegionVotingItems")
}

model SectorLocality {
  id                 String             @id @default(uuid())
  name               String
  code               String?            @unique
  sectorType         SectorType
  description        String?
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  sectorRegionId     String?
  expatriateRegionId String?
  adminId            String?
  bulletins          Bulletin[]         @relation("SectorLocalityBulletins")
  reports            Report[]           @relation("SectorLocalityReports")
  sectorAdminUnits   SectorAdminUnit[]
  admin              User?              @relation("SectorLocalityAdmin", fields: [adminId], references: [id])
  expatriateRegion   ExpatriateRegion?  @relation(fields: [expatriateRegionId], references: [id])
  sectorRegion       SectorRegion?      @relation(fields: [sectorRegionId], references: [id])
  plans              SubscriptionPlan[] @relation("SectorLocalityPlans")
  surveys            Survey[]           @relation("SectorLocalitySurveys")
  users              User[]
  votingItems        VotingItem[]       @relation("SectorLocalityVotingItems")
}

model SectorAdminUnit {
  id                 String             @id @default(uuid())
  name               String
  code               String?            @unique
  sectorType         SectorType
  description        String?
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  sectorLocalityId   String?
  expatriateRegionId String?
  adminId            String?
  bulletins          Bulletin[]         @relation("SectorAdminUnitBulletins")
  reports            Report[]           @relation("SectorAdminUnitReports")
  admin              User?              @relation("SectorAdminUnitAdmin", fields: [adminId], references: [id])
  expatriateRegion   ExpatriateRegion?  @relation(fields: [expatriateRegionId], references: [id])
  sectorLocality     SectorLocality?    @relation(fields: [sectorLocalityId], references: [id])
  sectorDistricts    SectorDistrict[]
  plans              SubscriptionPlan[] @relation("SectorAdminUnitPlans")
  surveys            Survey[]           @relation("SectorAdminUnitSurveys")
  users              User[]
  votingItems        VotingItem[]       @relation("SectorAdminUnitVotingItems")
}

model SectorDistrict {
  id                 String             @id @default(uuid())
  name               String
  code               String?            @unique
  sectorType         SectorType
  description        String?
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  sectorAdminUnitId  String?
  expatriateRegionId String?
  adminId            String?
  bulletins          Bulletin[]         @relation("SectorDistrictBulletins")
  reports            Report[]           @relation("SectorDistrictReports")
  admin              User?              @relation("SectorDistrictAdmin", fields: [adminId], references: [id])
  expatriateRegion   ExpatriateRegion?  @relation(fields: [expatriateRegionId], references: [id])
  sectorAdminUnit    SectorAdminUnit?   @relation(fields: [sectorAdminUnitId], references: [id])
  plans              SubscriptionPlan[] @relation("SectorDistrictPlans")
  surveys            Survey[]           @relation("SectorDistrictSurveys")
  users              User[]
  votingItems        VotingItem[]       @relation("SectorDistrictVotingItems")
}

model User {
  id                          String                @id @default(uuid())
  email                       String?               @unique
  mobileNumber                String                @unique
  password                    String
  role                        String                @default("USER")
  adminLevel                  AdminLevel            @default(USER)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  regionId                    String?
  localityId                  String?
  adminUnitId                 String?
  districtId                  String?
  activeHierarchy             ActiveHierarchy       @default(ORIGINAL)
  expatriateRegionId          String?
  nationalLevelId             String?
  sectorAdminUnitId           String?
  sectorDistrictId            String?
  sectorLocalityId            String?
  sectorNationalLevelId       String?
  sectorRegionId              String?
  managedAdminUnits           AdminUnit[]           @relation("AdminUnitAdmin")
  chatMemberships             ChatMembership[]
  sentMessages                ChatMessage[]
  createdChatRooms            ChatRoom[]            @relation("ChatRoomCreator")
  managedDistricts            District[]            @relation("DistrictAdmin")
  managedExpatriateRegions    ExpatriateRegion[]    @relation("ExpatriateRegionAdmin")
  managedLocalities           Locality[]            @relation("LocalityAdmin")
  memberDetails               MemberDetails?
  managedNationalLevels       NationalLevel[]       @relation("NationalLevelAdmin")
  profile                     Profile?
  refreshTokens               RefreshToken[]
  managedRegions              Region[]              @relation("RegionAdmin")
  reports                     Report[]
  managedSectorAdminUnits     SectorAdminUnit[]     @relation("SectorAdminUnitAdmin")
  managedSectorDistricts      SectorDistrict[]      @relation("SectorDistrictAdmin")
  managedSectorLocalities     SectorLocality[]      @relation("SectorLocalityAdmin")
  managedSectorNationalLevels SectorNationalLevel[] @relation("SectorNationalLevelAdmin")
  managedSectorRegions        SectorRegion[]        @relation("SectorRegionAdmin")
  subscriptions               Subscription[]
  approvedPlans               SubscriptionPlan[]    @relation("PlanApprover")
  createdPlans                SubscriptionPlan[]    @relation("PlanCreator")
  surveys                     SurveyResponse[]
  adminUnit                   AdminUnit?            @relation(fields: [adminUnitId], references: [id])
  district                    District?             @relation(fields: [districtId], references: [id])
  expatriateRegion            ExpatriateRegion?     @relation(fields: [expatriateRegionId], references: [id])
  locality                    Locality?             @relation(fields: [localityId], references: [id])
  nationalLevel               NationalLevel?        @relation(fields: [nationalLevelId], references: [id])
  region                      Region?               @relation(fields: [regionId], references: [id])
  sectorAdminUnit             SectorAdminUnit?      @relation(fields: [sectorAdminUnitId], references: [id])
  sectorDistrict              SectorDistrict?       @relation(fields: [sectorDistrictId], references: [id])
  sectorLocality              SectorLocality?       @relation(fields: [sectorLocalityId], references: [id])
  sectorNationalLevel         SectorNationalLevel?  @relation(fields: [sectorNationalLevelId], references: [id])
  sectorRegion                SectorRegion?         @relation(fields: [sectorRegionId], references: [id])
  votes                       Vote[]
  votingItems                 VotingItem[]

  @@index([mobileNumber])
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  phoneNumber String?
  avatarUrl   String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Content {
  id          String   @id @default(uuid())
  title       String
  description String?
  body        String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bulletin {
  id                          String               @id @default(uuid())
  title                       String
  content                     String
  date                        DateTime
  image                       String?
  published                   Boolean              @default(true)
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  targetRegionId              String?
  targetLocalityId            String?
  targetAdminUnitId           String?
  targetDistrictId            String?
  targetExpatriateRegionId    String?
  targetNationalLevelId       String?
  targetSectorAdminUnitId     String?
  targetSectorDistrictId      String?
  targetSectorLocalityId      String?
  targetSectorNationalLevelId String?
  targetSectorRegionId        String?
  targetAdminUnit             AdminUnit?           @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrict              District?            @relation(fields: [targetDistrictId], references: [id])
  targetExpatriateRegion      ExpatriateRegion?    @relation("ExpatriateRegionBulletins", fields: [targetExpatriateRegionId], references: [id])
  targetLocality              Locality?            @relation(fields: [targetLocalityId], references: [id])
  targetNationalLevel         NationalLevel?       @relation(fields: [targetNationalLevelId], references: [id])
  targetRegion                Region?              @relation(fields: [targetRegionId], references: [id])
  targetSectorAdminUnit       SectorAdminUnit?     @relation("SectorAdminUnitBulletins", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrict        SectorDistrict?      @relation("SectorDistrictBulletins", fields: [targetSectorDistrictId], references: [id])
  targetSectorLocality        SectorLocality?      @relation("SectorLocalityBulletins", fields: [targetSectorLocalityId], references: [id])
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelBulletins", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegion          SectorRegion?        @relation("SectorRegionBulletins", fields: [targetSectorRegionId], references: [id])
}

model ArchiveDocument {
  id        String   @id @default(uuid())
  title     String
  type      String
  category  String
  date      DateTime
  size      String
  url       String
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id                          String               @id @default(uuid())
  title                       String
  description                 String
  dueDate                     DateTime
  questions                   String
  published                   Boolean              @default(false)
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  targetRegionId              String?
  targetLocalityId            String?
  targetAdminUnitId           String?
  targetDistrictId            String?
  audience                    String               @default("public")
  targetExpatriateRegionId    String?
  targetNationalLevelId       String?
  targetSectorAdminUnitId     String?
  targetSectorDistrictId      String?
  targetSectorLocalityId      String?
  targetSectorNationalLevelId String?
  targetSectorRegionId        String?
  targetAdminUnit             AdminUnit?           @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrict              District?            @relation(fields: [targetDistrictId], references: [id])
  targetExpatriateRegion      ExpatriateRegion?    @relation("ExpatriateRegionSurveys", fields: [targetExpatriateRegionId], references: [id])
  targetLocality              Locality?            @relation(fields: [targetLocalityId], references: [id])
  targetNationalLevel         NationalLevel?       @relation(fields: [targetNationalLevelId], references: [id])
  targetRegion                Region?              @relation(fields: [targetRegionId], references: [id])
  targetSectorAdminUnit       SectorAdminUnit?     @relation("SectorAdminUnitSurveys", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrict        SectorDistrict?      @relation("SectorDistrictSurveys", fields: [targetSectorDistrictId], references: [id])
  targetSectorLocality        SectorLocality?      @relation("SectorLocalitySurveys", fields: [targetSectorLocalityId], references: [id])
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelSurveys", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegion          SectorRegion?        @relation("SectorRegionSurveys", fields: [targetSectorRegionId], references: [id])
  responses                   SurveyResponse[]
}

model SurveyResponse {
  id          String   @id @default(uuid())
  surveyId    String
  userId      String
  answers     String
  submittedAt DateTime @default(now())
  survey      Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([surveyId, userId])
}

model VotingItem {
  id                          String               @id @default(uuid())
  title                       String
  description                 String
  startDate                   DateTime
  endDate                     DateTime
  options                     String
  targetLevel                 String
  voteType                    String               @default("opinion")
  createdById                 String
  published                   Boolean              @default(false)
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  targetRegionId              String?
  targetLocalityId            String?
  targetAdminUnitId           String?
  targetDistrictId            String?
  targetExpatriateRegionId    String?
  targetNationalLevelId       String?
  targetSectorAdminUnitId     String?
  targetSectorDistrictId      String?
  targetSectorLocalityId      String?
  targetSectorNationalLevelId String?
  targetSectorRegionId        String?
  votes                       Vote[]
  createdBy                   User                 @relation(fields: [createdById], references: [id])
  targetAdminUnit             AdminUnit?           @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrict              District?            @relation(fields: [targetDistrictId], references: [id])
  targetExpatriateRegion      ExpatriateRegion?    @relation("ExpatriateRegionVotingItems", fields: [targetExpatriateRegionId], references: [id])
  targetLocality              Locality?            @relation(fields: [targetLocalityId], references: [id])
  targetNationalLevel         NationalLevel?       @relation(fields: [targetNationalLevelId], references: [id])
  targetRegion                Region?              @relation(fields: [targetRegionId], references: [id])
  targetSectorAdminUnit       SectorAdminUnit?     @relation("SectorAdminUnitVotingItems", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrict        SectorDistrict?      @relation("SectorDistrictVotingItems", fields: [targetSectorDistrictId], references: [id])
  targetSectorLocality        SectorLocality?      @relation("SectorLocalityVotingItems", fields: [targetSectorLocalityId], references: [id])
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelVotingItems", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegion          SectorRegion?        @relation("SectorRegionVotingItems", fields: [targetSectorRegionId], references: [id])
}

model Vote {
  id       String     @id @default(uuid())
  votingId String
  userId   String
  optionId String
  votedAt  DateTime   @default(now())
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  voting   VotingItem @relation(fields: [votingId], references: [id], onDelete: Cascade)

  @@unique([votingId, userId])
}

model Report {
  id                          String               @id @default(uuid())
  title                       String
  type                        String
  description                 String
  date                        DateTime
  status                      String               @default("pending")
  attachmentName              String?
  userId                      String
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  targetRegionId              String?
  targetLocalityId            String?
  targetAdminUnitId           String?
  targetDistrictId            String?
  targetExpatriateRegionId    String?
  targetNationalLevelId       String?
  targetSectorAdminUnitId     String?
  targetSectorDistrictId      String?
  targetSectorLocalityId      String?
  targetSectorNationalLevelId String?
  targetSectorRegionId        String?
  targetAdminUnit             AdminUnit?           @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrict              District?            @relation(fields: [targetDistrictId], references: [id])
  targetExpatriateRegion      ExpatriateRegion?    @relation("ExpatriateRegionReports", fields: [targetExpatriateRegionId], references: [id])
  targetLocality              Locality?            @relation(fields: [targetLocalityId], references: [id])
  targetNationalLevel         NationalLevel?       @relation(fields: [targetNationalLevelId], references: [id])
  targetRegion                Region?              @relation(fields: [targetRegionId], references: [id])
  targetSectorAdminUnit       SectorAdminUnit?     @relation("SectorAdminUnitReports", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrict        SectorDistrict?      @relation("SectorDistrictReports", fields: [targetSectorDistrictId], references: [id])
  targetSectorLocality        SectorLocality?      @relation("SectorLocalityReports", fields: [targetSectorLocalityId], references: [id])
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelReports", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegion          SectorRegion?        @relation("SectorRegionReports", fields: [targetSectorRegionId], references: [id])
  user                        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id                          String               @id @default(uuid())
  title                       String
  price                       String
  currency                    String
  period                      String
  features                    String
  active                      Boolean              @default(true)
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  approverId                  String?
  creatorId                   String?
  description                 String?
  isApproved                  Boolean              @default(false)
  isDonation                  Boolean              @default(false)
  targetAdminUnitId           String?
  targetDistrictId            String?
  targetLocalityId            String?
  targetRegionId              String?
  targetExpatriateRegionId    String?
  targetNationalLevelId       String?
  targetSectorAdminUnitId     String?
  targetSectorDistrictId      String?
  targetSectorLocalityId      String?
  targetSectorNationalLevelId String?
  targetSectorRegionId        String?
  subscriptions               Subscription[]
  approver                    User?                @relation("PlanApprover", fields: [approverId], references: [id])
  creator                     User?                @relation("PlanCreator", fields: [creatorId], references: [id])
  targetAdminUnit             AdminUnit?           @relation("AdminUnitPlans", fields: [targetAdminUnitId], references: [id])
  targetDistrict              District?            @relation("DistrictPlans", fields: [targetDistrictId], references: [id])
  targetExpatriateRegion      ExpatriateRegion?    @relation("ExpatriateRegionPlans", fields: [targetExpatriateRegionId], references: [id])
  targetLocality              Locality?            @relation("LocalityPlans", fields: [targetLocalityId], references: [id])
  targetNationalLevel         NationalLevel?       @relation("NationalLevelPlans", fields: [targetNationalLevelId], references: [id])
  targetRegion                Region?              @relation("RegionPlans", fields: [targetRegionId], references: [id])
  targetSectorAdminUnit       SectorAdminUnit?     @relation("SectorAdminUnitPlans", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrict        SectorDistrict?      @relation("SectorDistrictPlans", fields: [targetSectorDistrictId], references: [id])
  targetSectorLocality        SectorLocality?      @relation("SectorLocalityPlans", fields: [targetSectorLocalityId], references: [id])
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelPlans", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegion          SectorRegion?        @relation("SectorRegionPlans", fields: [targetSectorRegionId], references: [id])
}

model Subscription {
  id            String           @id @default(uuid())
  planId        String
  userId        String
  startDate     DateTime
  endDate       DateTime
  status        String           @default("active")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  amount        String
  paymentDate   DateTime?
  paymentMethod String?
  paymentStatus String           @default("pending")
  receipt       String?
  plan          SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberDetails {
  id                        String   @id @default(uuid())
  userId                    String   @unique
  fullName                  String
  nickname                  String?
  birthDate                 String?
  birthPlace                String?
  birthLocality             String?
  birthState                String?
  gender                    String?
  religion                  String?
  maritalStatus             String?
  nationalId                String?
  nationalIdIssueDate       String?
  passportNumber            String?
  neighborhood              String?
  locality                  String?
  state                     String?
  phone                     String?
  mobile                    String?
  highestEducation          String?
  educationInstitution      String?
  graduationYear            String?
  currentJob                String?
  jobSector                 String?
  employmentStatus          String?
  workAddress               String?
  disability                String?
  residenceAbroad           String?
  electoralDistrict         String?
  previousCouncilMembership String?
  previousPartyMembership   String?
  civilSocietyParticipation String?
  clubMembership            String?
  professionalMembership    String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id          String           @id @default(uuid())
  title       String
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  memberships ChatMembership[]
  messages    ChatMessage[]
  createdBy   User             @relation("ChatRoomCreator", fields: [createdById], references: [id], onDelete: Cascade)
}

model ChatMembership {
  id       String   @id @default(uuid())
  roomId   String
  userId   String
  joinedAt DateTime @default(now())
  room     ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([userId])
  @@index([roomId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  roomId    String
  senderId  String
  text      String
  createdAt DateTime @default(now())
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
  @@index([senderId])
}

enum AdminLevel {
  GENERAL_SECRETARIAT
  REGION
  LOCALITY
  ADMIN_UNIT
  DISTRICT
  USER
  ADMIN
  NATIONAL_LEVEL
  EXPATRIATE_GENERAL
  EXPATRIATE_REGION
}

enum SectorType {
  SOCIAL
  ECONOMIC
  ORGANIZATIONAL
  POLITICAL
}

enum ActiveHierarchy {
  ORIGINAL
  EXPATRIATE
  SECTOR
}
