// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Administrative level enum for user roles hierarchy
// Note: PostgreSQL supports enums, we don't need to use strings like before
enum AdminLevel {
  GENERAL_SECRETARIAT
  NATIONAL_LEVEL        // المستوى القومي - above regions
  REGION
  LOCALITY
  ADMIN_UNIT
  DISTRICT
  USER
  ADMIN
  EXPATRIATE_GENERAL    // General admin for expatriates hierarchy
  EXPATRIATE_REGION     // Specific expatriate region admin
}

// Sector type enum for القطاعات hierarchy
enum SectorType {
  SOCIAL        // الاجتماعي
  ECONOMIC      // الاقتصادي
  ORGANIZATIONAL // التنظيمي
  POLITICAL     // السياسي
}

// Active hierarchy preference for users
enum ActiveHierarchy {
  ORIGINAL      // Original geographic hierarchy
  EXPATRIATE    // Expatriate regions hierarchy
  SECTOR        // Sectors hierarchy
}

// ===== ORIGINAL HIERARCHY MODELS =====

// NationalLevel model represents المستوى القومي level (top level above regions)
model NationalLevel {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  regions     Region[]    // Regions under this national level
  users       User[]      // Users directly associated with this national level
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("NationalLevelAdmin", fields: [adminId], references: [id])
  
  // Content targeting this national level
  bulletins     Bulletin[]     // Bulletins targeted to national level
  surveys       Survey[]       // Surveys targeted to national level
  votingItems   VotingItem[]   // Voting items targeted to national level
  reports       Report[]       // Reports targeted to national level
  plans         SubscriptionPlan[] @relation("NationalLevelPlans")
}

// Region model represents الولاية level
model Region {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent national level (optional for backward compatibility)
  nationalLevelId String?
  nationalLevel   NationalLevel? @relation(fields: [nationalLevelId], references: [id])
  
  // Relationships
  users       User[]      // Users directly associated with this region
  localities  Locality[]  // Localities in this region
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("RegionAdmin", fields: [adminId], references: [id])
  
  // Content targeting this region
  bulletins     Bulletin[]     // Bulletins targeted to this region
  surveys       Survey[]       // Surveys targeted to this region
  votingItems   VotingItem[]   // Voting items targeted to this region
  reports       Report[]       // Reports targeted to this region
  plans         SubscriptionPlan[] @relation("RegionPlans")  // Subscription plans for this region
}

// Locality model represents المحلية level
model Locality {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent region
  regionId    String
  region      Region      @relation(fields: [regionId], references: [id])
  
  // Relationships
  users       User[]      // Users directly associated with this locality
  adminUnits  AdminUnit[] // Administrative units in this locality
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("LocalityAdmin", fields: [adminId], references: [id])
  
  // Content targeting this locality
  bulletins     Bulletin[]     // Bulletins targeted to this locality
  surveys       Survey[]       // Surveys targeted to this locality
  votingItems   VotingItem[]   // Voting items targeted to this locality
  reports       Report[]       // Reports targeted to this locality
  plans         SubscriptionPlan[] @relation("LocalityPlans")  // Subscription plans for this locality
}

// AdminUnit model represents الوحدة الادارية level
model AdminUnit {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent locality
  localityId  String
  locality    Locality    @relation(fields: [localityId], references: [id])
  
  // Relationships
  users       User[]      // Users directly associated with this admin unit
  districts   District[]  // Districts in this admin unit
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("AdminUnitAdmin", fields: [adminId], references: [id])
  
  // Content targeting this admin unit
  bulletins     Bulletin[]     // Bulletins targeted to this admin unit
  surveys       Survey[]       // Surveys targeted to this admin unit
  votingItems   VotingItem[]   // Voting items targeted to this admin unit
  reports       Report[]       // Reports targeted to this admin unit
  plans         SubscriptionPlan[] @relation("AdminUnitPlans")  // Subscription plans for this admin unit
}

// District model represents الحي level
model District {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent administrative unit
  adminUnitId String
  adminUnit   AdminUnit   @relation(fields: [adminUnitId], references: [id])
  
  // Relationships
  users       User[]      // Users directly associated with this district
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("DistrictAdmin", fields: [adminId], references: [id])
  
  // Content targeting this district
  bulletins     Bulletin[]     // Bulletins targeted to this district
  surveys       Survey[]       // Surveys targeted to this district
  votingItems   VotingItem[]   // Voting items targeted to this district
  reports       Report[]       // Reports targeted to this district
  plans         SubscriptionPlan[] @relation("DistrictPlans")  // Subscription plans for this district
}

// ===== EXPATRIATE HIERARCHY MODELS =====

// ExpatriateRegion model represents قطاع المغتربين
model ExpatriateRegion {
  id          String      @id @default(uuid())
  name        String      @unique
  code        String?     @unique
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  users       User[]      // Users in this expatriate region
  
  // Sector subdivisions
  sectorNationalLevels SectorNationalLevel[]
  sectorRegions        SectorRegion[]
  sectorLocalities     SectorLocality[]
  sectorAdminUnits     SectorAdminUnit[]
  sectorDistricts      SectorDistrict[]
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("ExpatriateRegionAdmin", fields: [adminId], references: [id])
  
  // Content targeting this expatriate region
  bulletins     Bulletin[]     @relation("ExpatriateRegionBulletins")
  surveys       Survey[]       @relation("ExpatriateRegionSurveys")
  votingItems   VotingItem[]   @relation("ExpatriateRegionVotingItems")
  reports       Report[]       @relation("ExpatriateRegionReports")
  plans         SubscriptionPlan[] @relation("ExpatriateRegionPlans")
}

// ===== SECTOR HIERARCHY MODELS =====

// SectorNationalLevel represents المستوى القومي in القطاعات hierarchy
model SectorNationalLevel {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  sectorType  SectorType  // الاجتماعي، الاقتصادي، التنظيمي، السياسي
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Link to expatriate region (optional - can exist independently or under expatriate)
  expatriateRegionId String?
  expatriateRegion   ExpatriateRegion? @relation(fields: [expatriateRegionId], references: [id])
  
  // Relationships
  sectorRegions SectorRegion[] // Sector regions under this national level
  users         User[]         // Users in this sector national level
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("SectorNationalLevelAdmin", fields: [adminId], references: [id])
  
  // Content targeting
  bulletins     Bulletin[]     @relation("SectorNationalLevelBulletins")
  surveys       Survey[]       @relation("SectorNationalLevelSurveys")
  votingItems   VotingItem[]   @relation("SectorNationalLevelVotingItems")
  reports       Report[]       @relation("SectorNationalLevelReports")
  plans         SubscriptionPlan[] @relation("SectorNationalLevelPlans")
}

// SectorRegion represents الولاية in القطاعات hierarchy
model SectorRegion {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  sectorType  SectorType  // الاجتماعي، الاقتصادي، التنظيمي، السياسي
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent sector national level
  sectorNationalLevelId String?
  sectorNationalLevel   SectorNationalLevel? @relation(fields: [sectorNationalLevelId], references: [id])
  
  // Link to expatriate region (optional)
  expatriateRegionId String?
  expatriateRegion   ExpatriateRegion? @relation(fields: [expatriateRegionId], references: [id])
  
  // Relationships
  sectorLocalities SectorLocality[] // Sector localities under this region
  users            User[]           // Users in this sector region
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("SectorRegionAdmin", fields: [adminId], references: [id])
  
  // Content targeting
  bulletins     Bulletin[]     @relation("SectorRegionBulletins")
  surveys       Survey[]       @relation("SectorRegionSurveys")
  votingItems   VotingItem[]   @relation("SectorRegionVotingItems")
  reports       Report[]       @relation("SectorRegionReports")
  plans         SubscriptionPlan[] @relation("SectorRegionPlans")
}

// SectorLocality represents المحلية in القطاعات hierarchy
model SectorLocality {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  sectorType  SectorType  // الاجتماعي، الاقتصادي، التنظيمي، السياسي
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent sector region
  sectorRegionId String?
  sectorRegion   SectorRegion? @relation(fields: [sectorRegionId], references: [id])
  
  // Link to expatriate region (optional)
  expatriateRegionId String?
  expatriateRegion   ExpatriateRegion? @relation(fields: [expatriateRegionId], references: [id])
  
  // Relationships
  sectorAdminUnits SectorAdminUnit[] // Sector admin units under this locality
  users            User[]            // Users in this sector locality
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("SectorLocalityAdmin", fields: [adminId], references: [id])
  
  // Content targeting
  bulletins     Bulletin[]     @relation("SectorLocalityBulletins")
  surveys       Survey[]       @relation("SectorLocalitySurveys")
  votingItems   VotingItem[]   @relation("SectorLocalityVotingItems")
  reports       Report[]       @relation("SectorLocalityReports")
  plans         SubscriptionPlan[] @relation("SectorLocalityPlans")
}

// SectorAdminUnit represents الوحدة الادارية in القطاعات hierarchy
model SectorAdminUnit {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  sectorType  SectorType  // الاجتماعي، الاقتصادي، التنظيمي، السياسي
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent sector locality
  sectorLocalityId String?
  sectorLocality   SectorLocality? @relation(fields: [sectorLocalityId], references: [id])
  
  // Link to expatriate region (optional)
  expatriateRegionId String?
  expatriateRegion   ExpatriateRegion? @relation(fields: [expatriateRegionId], references: [id])
  
  // Relationships
  sectorDistricts SectorDistrict[] // Sector districts under this admin unit
  users           User[]           // Users in this sector admin unit
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("SectorAdminUnitAdmin", fields: [adminId], references: [id])
  
  // Content targeting
  bulletins     Bulletin[]     @relation("SectorAdminUnitBulletins")
  surveys       Survey[]       @relation("SectorAdminUnitSurveys")
  votingItems   VotingItem[]   @relation("SectorAdminUnitVotingItems")
  reports       Report[]       @relation("SectorAdminUnitReports")
  plans         SubscriptionPlan[] @relation("SectorAdminUnitPlans")
}

// SectorDistrict represents الحي in القطاعات hierarchy
model SectorDistrict {
  id          String      @id @default(uuid())
  name        String
  code        String?     @unique
  sectorType  SectorType  // الاجتماعي، الاقتصادي، التنظيمي، السياسي
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Parent sector admin unit
  sectorAdminUnitId String?
  sectorAdminUnit   SectorAdminUnit? @relation(fields: [sectorAdminUnitId], references: [id])
  
  // Link to expatriate region (optional)
  expatriateRegionId String?
  expatriateRegion   ExpatriateRegion? @relation(fields: [expatriateRegionId], references: [id])
  
  // Relationships
  users User[] // Users in this sector district
  
  // Admin relationship
  adminId     String?
  admin       User?       @relation("SectorDistrictAdmin", fields: [adminId], references: [id])
  
  // Content targeting
  bulletins     Bulletin[]     @relation("SectorDistrictBulletins")
  surveys       Survey[]       @relation("SectorDistrictSurveys")
  votingItems   VotingItem[]   @relation("SectorDistrictVotingItems")
  reports       Report[]       @relation("SectorDistrictReports")
  plans         SubscriptionPlan[] @relation("SectorDistrictPlans")
}

model User {
  id             String         @id @default(uuid())
  email          String?        @unique
  mobileNumber   String         @unique // E.164 format: +249XXXXXXXXX
  password       String
  role           String         @default("USER") // For backward compatibility
  adminLevel     AdminLevel     @default(USER)
  activeHierarchy ActiveHierarchy @default(ORIGINAL) // User's preferred hierarchy view
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  profile        Profile?
  memberDetails  MemberDetails?
  refreshTokens  RefreshToken[]
  surveys        SurveyResponse[]
  votes          Vote[]
  reports        Report[]
  votingItems    VotingItem[]   // Created voting items
  subscriptions  Subscription[]
  createdPlans   SubscriptionPlan[] @relation("PlanCreator")
  approvedPlans  SubscriptionPlan[] @relation("PlanApprover")
  
  // ===== ORIGINAL HIERARCHY REFERENCES =====
  nationalLevelId String?        // المستوى القومي
  nationalLevel   NationalLevel? @relation(fields: [nationalLevelId], references: [id])
  regionId       String?        // الولاية
  region         Region?        @relation(fields: [regionId], references: [id])
  localityId     String?        // المحلية
  locality       Locality?      @relation(fields: [localityId], references: [id])
  adminUnitId    String?        // الوحدة الادارية
  adminUnit      AdminUnit?     @relation(fields: [adminUnitId], references: [id])
  districtId     String?        // الحي
  district       District?      @relation(fields: [districtId], references: [id])
  
  // ===== EXPATRIATE HIERARCHY REFERENCES =====
  expatriateRegionId String?           // قطاع المغتربين
  expatriateRegion   ExpatriateRegion? @relation(fields: [expatriateRegionId], references: [id])
  
  // ===== SECTOR HIERARCHY REFERENCES =====
  sectorNationalLevelId String?              // المستوى القومي (قطاع)
  sectorNationalLevel   SectorNationalLevel? @relation(fields: [sectorNationalLevelId], references: [id])
  sectorRegionId        String?              // الولاية (قطاع)
  sectorRegion          SectorRegion?        @relation(fields: [sectorRegionId], references: [id])
  sectorLocalityId      String?              // المحلية (قطاع)
  sectorLocality        SectorLocality?      @relation(fields: [sectorLocalityId], references: [id])
  sectorAdminUnitId     String?              // الوحدة الادارية (قطاع)
  sectorAdminUnit       SectorAdminUnit?     @relation(fields: [sectorAdminUnitId], references: [id])
  sectorDistrictId      String?              // الحي (قطاع)
  sectorDistrict        SectorDistrict?      @relation(fields: [sectorDistrictId], references: [id])
  
  // ===== MANAGED HIERARCHIES (for admins) =====
  // Original hierarchy
  managedNationalLevels NationalLevel[]  @relation("NationalLevelAdmin")
  managedRegions        Region[]         @relation("RegionAdmin")
  managedLocalities     Locality[]       @relation("LocalityAdmin")
  managedAdminUnits     AdminUnit[]      @relation("AdminUnitAdmin")
  managedDistricts      District[]       @relation("DistrictAdmin")
  
  // Expatriate hierarchy
  managedExpatriateRegions ExpatriateRegion[] @relation("ExpatriateRegionAdmin")
  
  // Sector hierarchy
  managedSectorNationalLevels SectorNationalLevel[] @relation("SectorNationalLevelAdmin")
  managedSectorRegions        SectorRegion[]        @relation("SectorRegionAdmin")
  managedSectorLocalities     SectorLocality[]      @relation("SectorLocalityAdmin")
  managedSectorAdminUnits     SectorAdminUnit[]     @relation("SectorAdminUnitAdmin")
  managedSectorDistricts      SectorDistrict[]      @relation("SectorDistrictAdmin")
  
  // Chat relationships
  createdChatRooms    ChatRoom[]     @relation("ChatRoomCreator")
  chatMemberships     ChatMembership[]
  sentMessages        ChatMessage[]
  
  @@index([mobileNumber])
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  phoneNumber String?
  avatarUrl   String?
  status      String    @default("active") // active or disabled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Content {
  id          String   @id @default(uuid())
  title       String
  description String?
  body        String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bulletin {
  id          String   @id @default(uuid())
  title       String
  content     String
  date        DateTime
  image       String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ===== ORIGINAL HIERARCHY TARGETING =====
  targetNationalLevelId String?
  targetNationalLevel   NationalLevel? @relation(fields: [targetNationalLevelId], references: [id])
  targetRegionId        String?
  targetRegion          Region?   @relation(fields: [targetRegionId], references: [id])
  targetLocalityId      String?
  targetLocality        Locality? @relation(fields: [targetLocalityId], references: [id])
  targetAdminUnitId     String?
  targetAdminUnit       AdminUnit? @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrictId      String?
  targetDistrict        District? @relation(fields: [targetDistrictId], references: [id])
  
  // ===== EXPATRIATE HIERARCHY TARGETING =====
  targetExpatriateRegionId String?
  targetExpatriateRegion   ExpatriateRegion? @relation("ExpatriateRegionBulletins", fields: [targetExpatriateRegionId], references: [id])
  
  // ===== SECTOR HIERARCHY TARGETING =====
  targetSectorNationalLevelId String?
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelBulletins", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegionId        String?
  targetSectorRegion          SectorRegion? @relation("SectorRegionBulletins", fields: [targetSectorRegionId], references: [id])
  targetSectorLocalityId      String?
  targetSectorLocality        SectorLocality? @relation("SectorLocalityBulletins", fields: [targetSectorLocalityId], references: [id])
  targetSectorAdminUnitId     String?
  targetSectorAdminUnit       SectorAdminUnit? @relation("SectorAdminUnitBulletins", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrictId      String?
  targetSectorDistrict        SectorDistrict? @relation("SectorDistrictBulletins", fields: [targetSectorDistrictId], references: [id])
}

model ArchiveDocument {
  id          String   @id @default(uuid())
  title       String
  type        String
  category    String
  date        DateTime
  size        String
  url         String
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Survey {
  id          String          @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  questions   String          // Stored as JSON string
  audience    String          @default("public") // "public" or "member"
  published   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  responses   SurveyResponse[]
  
  // ===== ORIGINAL HIERARCHY TARGETING =====
  targetNationalLevelId String?
  targetNationalLevel   NationalLevel? @relation(fields: [targetNationalLevelId], references: [id])
  targetRegionId        String?
  targetRegion          Region?   @relation(fields: [targetRegionId], references: [id])
  targetLocalityId      String?
  targetLocality        Locality? @relation(fields: [targetLocalityId], references: [id])
  targetAdminUnitId     String?
  targetAdminUnit       AdminUnit? @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrictId      String?
  targetDistrict        District? @relation(fields: [targetDistrictId], references: [id])
  
  // ===== EXPATRIATE HIERARCHY TARGETING =====
  targetExpatriateRegionId String?
  targetExpatriateRegion   ExpatriateRegion? @relation("ExpatriateRegionSurveys", fields: [targetExpatriateRegionId], references: [id])
  
  // ===== SECTOR HIERARCHY TARGETING =====
  targetSectorNationalLevelId String?
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelSurveys", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegionId        String?
  targetSectorRegion          SectorRegion? @relation("SectorRegionSurveys", fields: [targetSectorRegionId], references: [id])
  targetSectorLocalityId      String?
  targetSectorLocality        SectorLocality? @relation("SectorLocalitySurveys", fields: [targetSectorLocalityId], references: [id])
  targetSectorAdminUnitId     String?
  targetSectorAdminUnit       SectorAdminUnit? @relation("SectorAdminUnitSurveys", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrictId      String?
  targetSectorDistrict        SectorDistrict? @relation("SectorDistrictSurveys", fields: [targetSectorDistrictId], references: [id])
}

model SurveyResponse {
  id        String   @id @default(uuid())
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers   String   // Stored as JSON string
  submittedAt DateTime @default(now())

  @@unique([surveyId, userId])
}

model VotingItem {
  id          String    @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  options     String    // Stored as JSON string
  targetLevel String    // User level (الحي, الوحدة الإدارية, etc.) - kept for backward compatibility
  voteType    String    @default("opinion") // "electoral" or "opinion"
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  votes       Vote[]
  
  // ===== ORIGINAL HIERARCHY TARGETING =====
  targetNationalLevelId String?
  targetNationalLevel   NationalLevel? @relation(fields: [targetNationalLevelId], references: [id])
  targetRegionId        String?
  targetRegion          Region?   @relation(fields: [targetRegionId], references: [id])
  targetLocalityId      String?
  targetLocality        Locality? @relation(fields: [targetLocalityId], references: [id])
  targetAdminUnitId     String?
  targetAdminUnit       AdminUnit? @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrictId      String?
  targetDistrict        District? @relation(fields: [targetDistrictId], references: [id])
  
  // ===== EXPATRIATE HIERARCHY TARGETING =====
  targetExpatriateRegionId String?
  targetExpatriateRegion   ExpatriateRegion? @relation("ExpatriateRegionVotingItems", fields: [targetExpatriateRegionId], references: [id])
  
  // ===== SECTOR HIERARCHY TARGETING =====
  targetSectorNationalLevelId String?
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelVotingItems", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegionId        String?
  targetSectorRegion          SectorRegion? @relation("SectorRegionVotingItems", fields: [targetSectorRegionId], references: [id])
  targetSectorLocalityId      String?
  targetSectorLocality        SectorLocality? @relation("SectorLocalityVotingItems", fields: [targetSectorLocalityId], references: [id])
  targetSectorAdminUnitId     String?
  targetSectorAdminUnit       SectorAdminUnit? @relation("SectorAdminUnitVotingItems", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrictId      String?
  targetSectorDistrict        SectorDistrict? @relation("SectorDistrictVotingItems", fields: [targetSectorDistrictId], references: [id])
}

model Vote {
  id          String     @id @default(uuid())
  votingId    String
  voting      VotingItem @relation(fields: [votingId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  optionId    String
  votedAt     DateTime   @default(now())

  @@unique([votingId, userId])
}

model Report {
  id          String   @id @default(uuid())
  title       String
  type        String
  description String
  date        DateTime
  status      String   @default("pending")
  attachmentName String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ===== ORIGINAL HIERARCHY TARGETING =====
  targetNationalLevelId String?
  targetNationalLevel   NationalLevel? @relation(fields: [targetNationalLevelId], references: [id])
  targetRegionId        String?
  targetRegion          Region?   @relation(fields: [targetRegionId], references: [id])
  targetLocalityId      String?
  targetLocality        Locality? @relation(fields: [targetLocalityId], references: [id])
  targetAdminUnitId     String?
  targetAdminUnit       AdminUnit? @relation(fields: [targetAdminUnitId], references: [id])
  targetDistrictId      String?
  targetDistrict        District? @relation(fields: [targetDistrictId], references: [id])
  
  // ===== EXPATRIATE HIERARCHY TARGETING =====
  targetExpatriateRegionId String?
  targetExpatriateRegion   ExpatriateRegion? @relation("ExpatriateRegionReports", fields: [targetExpatriateRegionId], references: [id])
  
  // ===== SECTOR HIERARCHY TARGETING =====
  targetSectorNationalLevelId String?
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelReports", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegionId        String?
  targetSectorRegion          SectorRegion? @relation("SectorRegionReports", fields: [targetSectorRegionId], references: [id])
  targetSectorLocalityId      String?
  targetSectorLocality        SectorLocality? @relation("SectorLocalityReports", fields: [targetSectorLocalityId], references: [id])
  targetSectorAdminUnitId     String?
  targetSectorAdminUnit       SectorAdminUnit? @relation("SectorAdminUnitReports", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrictId      String?
  targetSectorDistrict        SectorDistrict? @relation("SectorDistrictReports", fields: [targetSectorDistrictId], references: [id])
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  title       String
  description String?
  price       String
  currency    String
  period      String
  features    String   // Stored as JSON string
  active      Boolean  @default(true)
  isApproved  Boolean  @default(false)
  isDonation  Boolean  @default(false) // True for donation requests, false for fixed subscriptions
  creatorId   String?
  creator     User?    @relation("PlanCreator", fields: [creatorId], references: [id])
  approverId  String?
  approver    User?    @relation("PlanApprover", fields: [approverId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
  
  // ===== ORIGINAL HIERARCHY TARGETING =====
  targetNationalLevelId String?
  targetNationalLevel   NationalLevel? @relation("NationalLevelPlans", fields: [targetNationalLevelId], references: [id])
  targetRegionId        String?
  targetRegion          Region?   @relation("RegionPlans", fields: [targetRegionId], references: [id])
  targetLocalityId      String?
  targetLocality        Locality? @relation("LocalityPlans", fields: [targetLocalityId], references: [id])
  targetAdminUnitId     String?
  targetAdminUnit       AdminUnit? @relation("AdminUnitPlans", fields: [targetAdminUnitId], references: [id])
  targetDistrictId      String?
  targetDistrict        District? @relation("DistrictPlans", fields: [targetDistrictId], references: [id])
  
  // ===== EXPATRIATE HIERARCHY TARGETING =====
  targetExpatriateRegionId String?
  targetExpatriateRegion   ExpatriateRegion? @relation("ExpatriateRegionPlans", fields: [targetExpatriateRegionId], references: [id])
  
  // ===== SECTOR HIERARCHY TARGETING =====
  targetSectorNationalLevelId String?
  targetSectorNationalLevel   SectorNationalLevel? @relation("SectorNationalLevelPlans", fields: [targetSectorNationalLevelId], references: [id])
  targetSectorRegionId        String?
  targetSectorRegion          SectorRegion? @relation("SectorRegionPlans", fields: [targetSectorRegionId], references: [id])
  targetSectorLocalityId      String?
  targetSectorLocality        SectorLocality? @relation("SectorLocalityPlans", fields: [targetSectorLocalityId], references: [id])
  targetSectorAdminUnitId     String?
  targetSectorAdminUnit       SectorAdminUnit? @relation("SectorAdminUnitPlans", fields: [targetSectorAdminUnitId], references: [id])
  targetSectorDistrictId      String?
  targetSectorDistrict        SectorDistrict? @relation("SectorDistrictPlans", fields: [targetSectorDistrictId], references: [id])
}

model Subscription {
  id          String          @id @default(uuid())
  planId      String
  plan        SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  amount      String          // Actual amount paid (could be different from plan price for donations)
  receipt     String?         // URL to receipt image or document
  paymentDate DateTime?
  paymentMethod String?
  paymentStatus String        @default("pending") // pending, paid, cancelled
  status      String          @default("active")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberDetails {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  fullName    String
  nickname    String?
  birthDate   String?
  birthPlace  String?
  birthLocality String?
  birthState  String?
  gender      String?
  religion    String?
  maritalStatus String?
  nationalId  String?
  nationalIdIssueDate String?
  passportNumber String?
  
  // Residence Information
  neighborhood String?
  locality    String?
  state       String?
  phone       String?
  mobile      String?
  
  // Education and Work
  highestEducation String?
  educationInstitution String?
  graduationYear String?
  currentJob   String?
  jobSector    String?
  employmentStatus String?
  workAddress  String?
  
  // Additional Information
  disability   String?
  residenceAbroad String?
  electoralDistrict String?
  
  // Political and Social Activity
  previousCouncilMembership String?
  previousPartyMembership String?
  civilSocietyParticipation String?
  clubMembership String?
  professionalMembership String?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Chat Models
model ChatRoom {
  id          String   @id @default(uuid())
  title       String
  createdById String
  createdBy   User     @relation("ChatRoomCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  memberships ChatMembership[]
  messages    ChatMessage[]
}

model ChatMembership {
  id        String   @id @default(uuid())
  roomId    String
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt  DateTime @default(now())
  
  @@unique([roomId, userId])
  @@index([userId])
  @@index([roomId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  roomId    String
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now())
  
  @@index([roomId, createdAt])
  @@index([senderId])
}

// Role enum replaced with String for SQLite compatibility
// Possible values: "USER", "ADMIN"
